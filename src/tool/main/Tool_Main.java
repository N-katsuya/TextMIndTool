package jp.ac.doshisha.bil0167.tool.main;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import jp.ac.doshisha.bil0167.tool.R.RBridge;
import jp.ac.doshisha.bil0167.tool.R.RFrame;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author katuya
 */
public class Tool_Main extends javax.swing.JFrame {

    private static StringBuilder FormatR;
    private static int belongscount;
    private static Vector<Vector<String>> data;
    private static Vector<String> columnnames = new Vector<String>();
    private static ArrayList<String> selectedtags = new ArrayList<String>();
    


    

    public static void setSelectedtags(ArrayList<String> selectedtags) {
        Tool_Main.selectedtags = selectedtags;
    }

    public static ArrayList<String> getSelectedtags() {
        return selectedtags;
    }
    
    

    public static void setBelongscount(int belongscount) {
        Tool_Main.belongscount = belongscount;
    }

    public static StringBuilder getFormatR() {
        return FormatR;
    }

    public static void setFormatR(String Format) {
        Tool_Main.FormatR.append(Format);
    }

    public static void setIsRF(boolean RF) {
        isRF = RF;
    }

    /**
     * Creates new form Tool_Main
     */
    public Tool_Main() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton5 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        RcheckMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton4.setText("参照");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextField1.setText("ファイルを選んで下さい。");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel1.setText("入力先");

        jLabel2.setText("出力先");

        jTextField2.setText("出力先を指定して下さい。");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jButton6.setText("参照");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("確認");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton14.setText("構文解析-f1");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        jButton14.setVisible(false);

        jButton17.setText("品詞を選択");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jButton18.setText("解析");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("列名が一行目にある");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(jButton6)
                        .addGap(90, 90, 90)
                        .addComponent(jButton17))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jCheckBox1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jButton18)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton14))
                                    .addComponent(jButton7))))))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(164, 164, 164)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton14)
                            .addComponent(jButton18)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4)
                            .addComponent(jLabel1)
                            .addComponent(jButton7))
                        .addGap(64, 64, 64)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jButton6)
                            .addComponent(jButton17))))
                .addContainerGap(138, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("操作", jPanel1);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 80, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("結果", jPanel2);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jButton5.setText("履歴のクリア");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 710, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addGap(30, 30, 30))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5)
                .addGap(0, 61, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("履歴", jPanel4);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(200, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("ファイル内容", jPanel5);

        jMenu1.setText("ファイル");

        jMenu3.setText("jMenu3");
        jMenu1.add(jMenu3);

        jMenu5.setText("jMenu5");
        jMenu1.add(jMenu5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("設定");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItem2.setText("辞書設定");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        jMenu7.setText("R");
        jMenu7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu7ActionPerformed(evt);
            }
        });

        RcheckMenuItem.setText("R起動");
        RcheckMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RcheckMenuItemActionPerformed(evt);
            }
        });
        jMenu7.add(RcheckMenuItem);

        jMenuItem1.setText("R環境確認");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem1);

        jMenuBar1.add(jMenu7);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jMenu7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu7ActionPerformed

    private void RcheckMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RcheckMenuItemActionPerformed
        // TODO add your handling code here:
        jp.ac.doshisha.bil0167.tool.R.RBridge rb = new RBridge(this);
        try {
            //  rb.checkR();
            if (firstRF) {

                RFrame rf = new RFrame(this, false, false);
                rf.setVisible(true);
                firstRF = false;
            } else if (!isRF) {
                RFrame rf = new RFrame(this, false, false);
                rf.setVisible(true);
            }

            // rf.openConsole();
            if (GuiRConsole.isInterrupt()) {
                GuiRConsole.getFrame().setVisible(true);
            } else if (firstGuiR) {
                GuiRConsole.StartGUIRConsole();
                firstGuiR = false;
            }

        } catch (Exception ex) {
            Logger.getLogger(Tool_Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_RcheckMenuItemActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        jTextArea2.setText("");
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        // TODO add your handling code here:
      //System.out.println(method.getBelongsData(data, belongscount));
     SelectBelongsFrame sbf = new SelectBelongsFrame(method.getBelongsData(data, belongscount),columnnames,jCheckBox1.isSelected());
     
     sbf.setOutputpath(jTextField2.getText());
     sbf.setOutputFilename(filename);
     
//        sbf.setTree(method.getBelongsData(data, belongscount));
//        sbf.setColumnnames(columnnames);
  

        sbf.setVisible(true);
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        // TODO add your handling code here:
        SelectTagFrame slf = new SelectTagFrame();
        slf.setVisible(true);


    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed

    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model;

        model = new DefaultTableModel(data, columnnames);
        jTable1.setModel(model);
        jTabbedPane1.setSelectedIndex(3);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        JFileChooser filechooser = new JFileChooser("c:¥¥temp");
        filechooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int selected = filechooser.showSaveDialog(this);
        if (selected == JFileChooser.APPROVE_OPTION) {
            File file = filechooser.getSelectedFile();
            jTextField2.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        File dir = new File(System.getProperty("user.home"), "Desktop");
        JFileChooser filechooser = new JFileChooser(dir);

        int selected = filechooser.showOpenDialog(this);
        if (selected == JFileChooser.APPROVE_OPTION) {
            
            File file = filechooser.getSelectedFile();
            String path2 = file.getAbsolutePath();
            jTextField1.setText(path2);
            path = path2;
            filename = file.getName();
            belongscount = method.countColumnNumber(new File(path)) - 1;
            data = method.readCsv(new File(path));
            columnnames.removeAllElements();
            if (jCheckBox1.isSelected()) {
                Vector<String> temp = data.get(0);
                for (String tempst : temp) {
                    columnnames.add(tempst);
                }
                data.remove(0);
            } else {
                for (int i = 0; i < belongscount; i++) {
                    columnnames.add("属性" + (i + 1));
                }

                columnnames.add("内容");
            }
            
             filename = filename.replaceAll(".csv", "");
            filename = filename.replaceAll(".txt", "");
            String resultfilename ="./temp/result_"+filename+".txt";
            String command = "mecab " + path2 + " -o " + resultfilename;
            try {
                //  System.out.println(command);
                Runtime.getRuntime().exec(command);
            } catch (IOException ex) {
                Logger.getLogger(Tool_Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (selected == JFileChooser.CANCEL_OPTION) {

        } else if (selected == JFileChooser.ERROR_OPTION) {

        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
        DictionaryOptionFrame dof = new DictionaryOptionFrame();
       dof.setSize(300, 400);
        dof.setVisible(true);
        System.out.println("aaa");
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
            DictionaryOptionFrame dof = new DictionaryOptionFrame();
        dof.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            // TODO add your handling code here:
            if(!checkRx64()){
                checkRi386();
            }
        } catch (Exception ex) {
            Logger.getLogger(Tool_Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private boolean checkRx64() throws Exception {
		String path = System.getenv("PATH");
		//      System.out.println(path);
		Pattern pattern = Pattern.compile("^([^;]+?\\\\R\\\\R-\\d+?.\\d+?.\\d+?\\\\bin\\\\x64)|" +
				";([^;]+?\\\\R\\\\R-\\d+?.\\d+?.\\d+?\\\\bin\\\\x64)");
		Matcher matcher = pattern.matcher(path);
		String R_HOME = null;
		if(matcher.find()) {
			R_HOME = matcher.group(1);
			if(R_HOME == null)
				R_HOME = matcher.group(2);
		}
        System.out.println(R_HOME);
		if(R_HOME == null) {
			//processingErrorMessage("Please install 32 bit R, and add the R folder (..\\R\\..\\bin\\i386) to the System PATH variable, at first.");
			return true;
		}else{
                    checkR_Ver(R_HOME,"x64");
                return false;
                }
//                        else {
//			File R_FILE = new File(R_HOME + "\\R.exe");
//			if(!R_FILE.exists()) {
//				//processingErrorMessage("Please install 32 bit R, and add the R folder (..\\R\\..\\bin\\i386) to the System PATH variable, at first.");
//				return true;
//			} else {
//				//check R version
//				int idx0 = R_HOME.indexOf("R-") + 2;
//				int idx1 = R_HOME.indexOf(".", idx0) + 1;
//				idx1 = R_HOME.indexOf(".", idx1);
//				String R_VERSION = R_HOME.substring(idx0, idx1) + ".0";
//				
//				boolean RELOAD = false;
//				
//				//check rJava
//				String result = execCmd("Rscript ./R/rJava0.R")[1];
//				//rJava has not been installed
//				if(result.contains("find.package")) {
//					String mes = "Package \"rJava\" is required.\n" +
//					"Do you want to install the package now? (Please make sure that the proxy settings are correct.)";
//					int answer = showConfirmMessage(mes, "YES_NO_OPTION");
//					if(answer == 0) { // YES
//						result = execCmd("Rscript ./R/rJava1.R")[1];
//						showMessage(result);
//					} else {
//						return false;
//					}
//				}// end of check rJava
//				
//				//check JRI.jar
//				if(R_VERSION.compareTo(Utility.getDefaultJRIVersion()) != 0) {
//					String srcPath = "./lib/JRI/" + R_VERSION + "/JRI.jar";
//					String destPath = "./lib/JRI.jar";
//					Utility.copyTransfer(srcPath, destPath);
//					srcPath = "./lib/JRI/" + R_VERSION + "/jri.dll";
//					destPath = "./jri.dll";
//					Utility.copyTransfer(srcPath, destPath);
//					
//					Map<String, String> values = new HashMap<String, String>();
//					values.put("version", R_VERSION);
//					Utility.updateINIFile(Utility.JRI, values);
//					
//					RELOAD = true;
//				}
//				
//				//check JavaGD
//				result = execCmd("Rscript R\\JavaGD0.R")[1];
//				//JavaGD has not been installed
//				if(result.contains("find.package")) {
//					String mes = "Package \"JavaGD\" is required.\n" +
//					"Do you want to install the package now? (Please make sure that the proxy settings are correct.)";
//					int answer = showConfirmMessage(mes, "YES_NO_OPTION");
//					if(answer == 0) { // YES
//						result = execCmd("Rscript R\\JavaGD1.R")[1];
//						showMessage(result);
//						
//						//copy JavaGD files
//						String srcPath = R_HOME.substring(0, R_HOME.indexOf("\\bin")) + "\\library\\JavaGD\\java\\javaGD.jar";
//						String destPath = "./lib/javaGD.jar";
//						Utility.copyTransfer(srcPath, destPath);
//						srcPath = R_HOME.substring(0, R_HOME.indexOf("\\bin")) + "\\library\\JavaGD\\libs\\i386\\JavaGD.dll";
//						destPath = "./JavaGD.dll";
//						Utility.copyTransfer(srcPath, destPath);
//						
//						RELOAD = true;
//					} else {
//						return false;
//					}
//				}
//				if(RELOAD) {
//					String mes = "It is needed to restart MTMineR to use R.\n" +
//							"Do you want to close MTMineR now?";
//							int answer = showConfirmMessage(mes, "YES_NO_OPTION");
//							if(answer == 0) {
//								saveCharset();
//								removeTmpFolder();
//								System.exit(0);
//							} else {
//								showMessage("Please restart MTMineR later!");
//								jMenuR.setEnabled(false);
//							}
//							R_VALID = false;
//							return false;
//				} else {
//					R_VALID = true;
//					return true;
//				}
//			}
//		}
	}
    
    private static void checkR_Ver(String r,String rbit) throws IOException{
        String R_HOME = r;
        String R_Bit = rbit;
        
       // check R version
				int idx0 = R_HOME.indexOf("R-") + 2;
				int idx1 = R_HOME.indexOf(".", idx0) + 1;
				idx1 = R_HOME.indexOf(".", idx1);
				String R_VERSION = R_HOME.substring(idx0, idx1) + ".0";
	       System.out.println(R_VERSION);	
            String   srcPath = "./lib/JRI/" + R_VERSION +"/"+R_Bit+ "/jri.dll";
	String				destPath = "./jri.dll";
					method.copyTransfer(srcPath, destPath);
				boolean RELOAD = false;
        
    }
    
    
       private boolean checkRi386() throws Exception {
		String path = System.getenv("PATH");
		//      System.out.println(path);
		Pattern pattern = Pattern.compile("^([^;]+?\\\\R\\\\R-\\d+?.\\d+?.\\d+?\\\\bin\\\\i386)|" +
				";([^;]+?\\\\R\\\\R-\\d+?.\\d+?.\\d+?\\\\bin\\\\i386)");
		Matcher matcher = pattern.matcher(path);
		String R_HOME = null;
		if(matcher.find()) {
			R_HOME = matcher.group(1);
			if(R_HOME == null)
				R_HOME = matcher.group(2);
		}
        System.out.println(R_HOME);
		if(R_HOME == null) {
			//processingErrorMessage("Please install 32 bit R, and add the R folder (..\\R\\..\\bin\\i386) to the System PATH variable, at first.");
			return true;
		}else{
                    checkR_Ver(R_HOME,"i386");
                return false;
                }

	}
 
    
    public static Vector<Vector<String>> readCsv(File f) {

        Vector<Vector<String>> data = new Vector<Vector<String>>();
        try {
            FileInputStream s = new FileInputStream(f);
            InputStreamReader r = new InputStreamReader(s, "Shift_JIS");
            BufferedReader br = new BufferedReader(r);
            String line;
            while ((line = br.readLine()) != null) {
                line = line.substring(0, line.length() - 1);
                String[] ary = line.split("[\t|,]");
                Vector<String> v = new Vector<String>();
                for (String cell : ary) {
                    v.add(cell);
                }
                data.add(v);
            }
            br.close();
            r.close();
            s.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return data;
    }

    public static void passDataCabocha(ResultSet rs) throws SQLException {
        ResultSetMetaData rm = rs.getMetaData();
        int cnum = rm.getColumnCount();
        String outputFileName = "temp.txt";
        File file = new File(outputFileName);
        if (file.exists()) {
            file.delete();

        }

        File outputFile = new File(outputFileName);
        while (rs.next()) {
            for (int i = 1; i <= cnum; i++) {

                if (i == cnum) {
                    SaveCashData(outputFile, rs.getObject(i).toString());

                }

            }

        }
        ExcuteCabocha();
    }

    public static void ExcuteCabocha() {

        try {

            int tagline = 1;
            int tagcounter = 0;
            int data = 0;
            int f = 0;
            int g = 0;

            String[] command = {"cmd.exe", "/c", "cabocha", "temp.txt", "-f1"};

            Process ps = Runtime.getRuntime().exec(command);
            BufferedReader bReader_i = new BufferedReader(new InputStreamReader(ps.getInputStream(), "MS932"));
            String targetLine;

            ArrayList<Integer> phlinearray = new ArrayList<Integer>();
            HashMap<Integer, String> wordmap = new HashMap<Integer, String>();
            HashMap<Integer, String> labelmap = new HashMap<Integer, String>();
            boolean prevasta = true;
            String prevword = null;
            String phline = null;

            while (true) {

                targetLine = bReader_i.readLine();

                if (targetLine == null) {
                    break;
                } else if (targetLine.equals("EOS")) {
                    //System.out.println("_________");
                    tagline = 1;
                    data++;
                    f = 0;
                    g = 0;

                    for (int ph : phlinearray) {
                        String temp = labelmap.get(ph);
                        StringBuilder stb = new StringBuilder(temp);

                        if (temp.equals("-1D")) {
                            stb.deleteCharAt(2);
                        } else if (temp.equals("1D") || temp.equals("2D") || temp.equals("3D") || temp.equals("4D") || temp.equals("5D") || temp.equals("6D") || temp.equals("7D") || temp.equals("8D") || temp.equals("9D")) {
                            stb.deleteCharAt(1);
                        } else {
                            stb.deleteCharAt(2);
                        }
                        int intlabel = Integer.parseInt(stb.toString());

                    }
                    phlinearray.clear();
                    labelmap.clear();
                    wordmap.clear();
                    prevasta = true;
                    prevword = null;
                    continue;
                } else {

                    String label;
                    String targetWord = targetLine.split("[\t|,| ]")[0];
                    if (targetWord.equals("*")) {

                        phline = targetLine.split("[\t|,| ]")[1];
                        phlinearray.add(Integer.parseInt(phline));
                        label = targetLine.split("[\t|,| ]")[2];
                        labelmap.put(Integer.parseInt(phline), label);
                        prevasta = true;

                    } else {

                        wordmap.put(phlinearray.get(phlinearray.size() - 1), targetWord);
                        if (!prevasta) {
                            StringBuilder stb = new StringBuilder(prevword);

                            stb.append(targetWord);
                            targetWord = stb.toString();
                        }
                        prevasta = false;
                        prevword = targetWord;

                    }
                }

            }

            ps.waitFor();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void SaveCashData(File outputFile, String text) {

        try {
            FileOutputStream fos = new FileOutputStream(outputFile, true);
            OutputStreamWriter osw = new OutputStreamWriter(fos, "Shift_JIS");
            PrintWriter pw = new PrintWriter(osw);

            pw.write(text + "\r\n");

            // 後始末
            pw.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tool_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tool_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tool_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tool_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tool_Main().setVisible(true);
            }
        });
    }

    public static ArrayList<String> getComboBoxElements(ArrayList<String> tabbelongs, int i) {

        List<String> list = new ArrayList<String>();
        for (String s3 : tabbelongs) {

            String taglist1 = s3.split("[\t|,]")[i];
            list.add(taglist1);

        }
        HashSet<String> hashSet = new HashSet<String>();
        hashSet.addAll(list);

        ArrayList<String> al = new ArrayList<String>();
        al.addAll(hashSet);
        Collections.sort(al);
        if (al.isEmpty()) {
            al.add("なし");
            return al;
        }
        return al;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem RcheckMenuItem;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
    private static String path;

    public static String getPath() {
        return path;
    }

    public static String getFilename() {
        return filename;
    }
    private static String filename;
    private String savepath;
    private String savefolder;
    private static boolean firstRF = true;
    private static boolean firstGuiR = true;
    private static boolean isRF = true;
    private static String noisepath = "./dictionary/noise.txt";
    private static String synonympath ="./dictionary/synonym.txt" ;

    public static String getNoisepath() {
        return noisepath;
    }

    public static void setNoisepath(String noisepath) {
        Tool_Main.noisepath = noisepath;
    }

    public static String getSynonympath() {
        return synonympath;
    }

    public static void setSynonympath(String synonympath) {
        Tool_Main.synonympath = synonympath;
    }
    

    public static boolean isFirstRF() {
        return firstRF;
    }

    public static void setFirstRF(boolean firstRF) {
        Tool_Main.firstRF = firstRF;
    }
        public static boolean isIsRF() {
        return isRF;
    }

    public static void setisRF(boolean firstRF) {
        Tool_Main.isRF = firstRF;
    }

    public static boolean isFirstGuiR() {
        return firstGuiR;
    }

    public static void setFirstGuiR(boolean firstGuiR) {
        Tool_Main.firstGuiR = firstGuiR;
    }
    
    
    
}


class SubThread extends Thread {

    public void run() {

        JFrame f = new JFrame("Progress");
        JProgressBar p = new JProgressBar();
        p.setIndeterminate(true);
        f.getContentPane().add(p);
        f.pack();
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.setVisible(true);

    }
}

class ShowResultFrame extends JFrame {

    private static StringBuilder text = new StringBuilder();

    ShowResultFrame(String re) {
        setTitle("Result");
        setSize(500, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel p = new JPanel();

        JTextArea area = new JTextArea(20, 20);

        JScrollPane scrollpane1 = new JScrollPane(area);

        area.append(re);
        p.add(scrollpane1);

        Container contentPane = getContentPane();
        contentPane.add(p, BorderLayout.CENTER);

        JPanel p2 = new JPanel();
        JButton ok = new JButton("閉じる");
        //JButton ana = new JButton("Rで分析");
        ok.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                //To change body of generated methods, choose Tools | Templates.
                //System.exit(0);
                Component c = (Component) e.getSource();
                Window w = SwingUtilities.getWindowAncestor(c);
                w.dispose();
            }
        });

        p2.add(ok);

        contentPane.add(p2, BorderLayout.SOUTH);

    }

    public static StringBuilder getText() {
        return text;
    }

}
